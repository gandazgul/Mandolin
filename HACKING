-- FOLDER STRUCTURE --
index.php - detects the user's browser (mobil or PC) and includes the correct index file.
index_pc.php - the index file for the PC version of the application
index_mobi.php - the index file for the mobil version of the application

/client  - client files, this files contain mainly HTML. There is one for each section.
/client/js - javascript files (one for each client file e.g. adm.php -> adm.js)
/client/js/lib - JS libraries used. (jquery and pluggins, JSON)
/client/css - css files. There is one for each client file e.g. adm.php -> adm.css (this files will contain CSS clases needed only by their
						client file)
/client/css/lib - css files used by the libraries, (e.g. jqueryUI)
/client/css/global :
	base.css - basic page layout and general clasess
	content.css - colors, fonts, font size, backgrounds, etc
	mod.ie.css - hacks to make it look right in IE 7
	nav.slidingdoor.css - css for the navigation
/client/images - images used within the application
/client/flash - the flash player - not being used yet
/client/views - templates used in the system - only one for now, I plan to make it more template driven in the future.

/server - the ajax server, this files process the ajax requests coming from the JS in the client and use the DB models to retrieve data and
format it accordingly.

/models - here resides the classes for each of the tables used in the application. Each table within the DB has its own model, naming
convention is: [tablename: lowercase].php. Class takes the same name as the file but starting with Uppercase with the suffix 'Model'
(e.g. artists.php -> ArtistsModel). Each file has the class init right there so its only necessary to include the file; calling the
destructor and unsetting the variable is up to you. The variable is usually the exactly the same name as the file.

/data - here resides the file 'settings.json', this file, as its name indicates, holds the global settings for Mandolin in a JSON structure.
You shouldnt have to modify this file manually ever. All the settings are modifiable in the admin page.
Also in this folder is the sqlite database. In the future I will enable the use of MySQL in which case this file wont be needed.

/install - install script, this will run if it exists, it should be deleted in production instances after running it once.

all other files not on this list are development files and can be deleted in a production instance.

-- HOW DOES IT WORK --
The index file includes all other client files based on a parameter called "p", so for example: index.php?p=music will load the music.php page 
in the client folder. if "p" is not a valid file, then a "main" page, defined in the settings, will be loaded, the main page could any of them.
In case the "main" page doesnt exist an error will thrown.

All client pages have a corresponding javascript file with the same name, that makes AJAX requests to a server-side php file, with the same name, 
that then uses the DB models (/models/) classes to perform the requested operations in the DBs, the result is always given in the same object that 
has the following structure:

DBModelResponse - isError : bool
				  errorCode: int - if isError is true this will contain the error code
				  strResult: string - if isError is true this contains a string with the error message, else it contains the requested data in json format.

I tried my best to make the server files restful using only GET and POST.
GET - get all entries in the table
GET:ID=? - get will get record WHERE ID=?
GET:[other params] - get a refined list of all the records in the table.
GET:A=? will execute a function called A defined within the file.

POST - Will be considered a new entry for the table
POST:ID=? - Will be considered modifications to record ID. This might be replaced by the proper PUT HTTP verb in the future.
POST:A=delete:ID=? - will delete a record. This might be replaced by the proper DELETE HTTP Verb in the future.
POST:A=? will also call a function called A defined within the file.
